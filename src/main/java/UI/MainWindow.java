package UI;

import UI.adapters.MatrixMultiplierMouseAdapter;
import UI.listeners.MatrixColumnSizeChangeListener;
import UI.listeners.MatrixRowsSizeChangeListener;
import domain.MatrixTableModel;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.DefaultFormatter;
import java.awt.*;

public class MainWindow {
  private JPanel MainPanel;
  private JSpinner matrixAX;
  private JSpinner matrixBX;
  private JLabel firstMatrixLabel;
  private JLabel secondMatrixSizeLabel;
  private JLabel firstMatrixYsizeLabel;
  private JLabel secondMatrixYsizelabel;
  private JSpinner matrixAY;
  private JSpinner matrixBY;
  private JTable matrixATable;
  private JTable matrixBTable;
  private JButton multiplyButton;

  public MainWindow() {
    setSpinnerNumberModel();
    setTableMatrixModels();
    JComponent comp = matrixAX.getEditor();
    JFormattedTextField field = (JFormattedTextField) comp.getComponent(0);
    DefaultFormatter formatter = (DefaultFormatter) field.getFormatter();
    formatter.setCommitsOnValidEdit(true);
    matrixAX.addChangeListener(new MatrixRowsSizeChangeListener(this.matrixATable, this.matrixAX));
    matrixAY.addChangeListener(new MatrixColumnSizeChangeListener(this.matrixATable, this.matrixAY));

    matrixBX.addChangeListener(new MatrixRowsSizeChangeListener(this.matrixBTable, this.matrixBX));
    matrixBY.addChangeListener(new MatrixColumnSizeChangeListener(this.matrixBTable, this.matrixBY));
    multiplyButton.addMouseListener(new MatrixMultiplierMouseAdapter(this.matrixATable.getModel(), this.matrixBTable.getModel()));
  }

  private void setTableMatrixModels() {
    this.matrixATable.setModel(new MatrixTableModel((int) this.matrixAX.getValue(), (int) this.matrixAY.getValue()));
    this.matrixBTable.setModel(new MatrixTableModel((int) this.matrixBX.getValue(), (int) this.matrixBY.getValue()));
    centerTableValues(this.matrixATable);
    centerTableValues(this.matrixBTable);
  }

  private void centerTableValues(final JTable table) {
    DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
    centerRenderer.setHorizontalAlignment(JLabel.CENTER);
    for (int i = 0; i < table.getColumnCount(); ++i) {
      table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
    }
  }

  private void setSpinnerNumberModel() {
    this.matrixAX.setModel(new SpinnerNumberModel(4, 1, 99, 1));
    this.matrixAY.setModel(new SpinnerNumberModel(4, 1, 99, 1));
    this.matrixBX.setModel(new SpinnerNumberModel(2, 1, 99, 1));
    this.matrixBY.setModel(new SpinnerNumberModel(2, 1, 99, 1));
  }

  public static void main(String[] args) {
    MainWindow mW = new MainWindow();
    JFrame jFrame = new JFrame("Matrix multiplier");
    jFrame.setContentPane(mW.MainPanel);
    jFrame.setMinimumSize(new Dimension(600, 600));
    jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    jFrame.pack();
    jFrame.setVisible(true);
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    MainPanel = new JPanel();
    MainPanel.setLayout(new GridBagLayout());
    MainPanel.setBorder(BorderFactory.createTitledBorder(""));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridBagLayout());
    GridBagConstraints gbc;
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    MainPanel.add(panel1, gbc);
    panel1.setBorder(BorderFactory.createTitledBorder("Matrix size :"));
    matrixAX = new JSpinner();
    matrixAX.setVisible(true);
    matrixAX.putClientProperty("minimumValue", new Integer(0));
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel1.add(matrixAX, gbc);
    secondMatrixSizeLabel = new JLabel();
    Font secondMatrixSizeLabelFont = this.$$$getFont$$$(null, -1, 18, secondMatrixSizeLabel.getFont());
    if (secondMatrixSizeLabelFont != null) secondMatrixSizeLabel.setFont(secondMatrixSizeLabelFont);
    secondMatrixSizeLabel.setText("Select second matrix X size : ");
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    panel1.add(secondMatrixSizeLabel, gbc);
    matrixBX = new JSpinner();
    gbc = new GridBagConstraints();
    gbc.gridx = 3;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel1.add(matrixBX, gbc);
    firstMatrixLabel = new JLabel();
    Font firstMatrixLabelFont = this.$$$getFont$$$(null, -1, 18, firstMatrixLabel.getFont());
    if (firstMatrixLabelFont != null) firstMatrixLabel.setFont(firstMatrixLabelFont);
    firstMatrixLabel.setOpaque(false);
    firstMatrixLabel.setText("Select first matrix X size : ");
    firstMatrixLabel.putClientProperty("html.disable", Boolean.FALSE);
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    panel1.add(firstMatrixLabel, gbc);
    firstMatrixYsizeLabel = new JLabel();
    Font firstMatrixYsizeLabelFont = this.$$$getFont$$$(null, -1, 18, firstMatrixYsizeLabel.getFont());
    if (firstMatrixYsizeLabelFont != null) firstMatrixYsizeLabel.setFont(firstMatrixYsizeLabelFont);
    firstMatrixYsizeLabel.setOpaque(false);
    firstMatrixYsizeLabel.setText("Select first matrix Y size : ");
    firstMatrixYsizeLabel.putClientProperty("html.disable", Boolean.FALSE);
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    panel1.add(firstMatrixYsizeLabel, gbc);
    matrixAY = new JSpinner();
    matrixAY.setVisible(true);
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel1.add(matrixAY, gbc);
    secondMatrixYsizelabel = new JLabel();
    Font secondMatrixYsizelabelFont = this.$$$getFont$$$(null, -1, 18, secondMatrixYsizelabel.getFont());
    if (secondMatrixYsizelabelFont != null) secondMatrixYsizelabel.setFont(secondMatrixYsizelabelFont);
    secondMatrixYsizelabel.setText("Select second matrix Y size : ");
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    panel1.add(secondMatrixYsizelabel, gbc);
    matrixBY = new JSpinner();
    gbc = new GridBagConstraints();
    gbc.gridx = 3;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel1.add(matrixBY, gbc);
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridBagLayout());
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    MainPanel.add(panel2, gbc);
    panel2.setBorder(BorderFactory.createTitledBorder(""));
    final JPanel panel3 = new JPanel();
    panel3.setLayout(new GridBagLayout());
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    panel2.add(panel3, gbc);
    matrixATable = new JTable();
    matrixATable.setAutoResizeMode(4);
    matrixATable.setCellSelectionEnabled(true);
    matrixATable.setColumnSelectionAllowed(true);
    matrixATable.setFillsViewportHeight(false);
    Font matrixATableFont = this.$$$getFont$$$(null, -1, 14, matrixATable.getFont());
    if (matrixATableFont != null) matrixATable.setFont(matrixATableFont);
    matrixATable.setName("Matrix A");
    matrixATable.setUpdateSelectionOnSort(false);
    matrixATable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    panel3.add(matrixATable, gbc);
    final JPanel spacer1 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel3.add(spacer1, gbc);
    final JPanel panel4 = new JPanel();
    panel4.setLayout(new GridBagLayout());
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    panel2.add(panel4, gbc);
    matrixBTable = new JTable();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    panel4.add(matrixBTable, gbc);
    multiplyButton = new JButton();
    multiplyButton.setText("MULTIPLY");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 3;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    MainPanel.add(multiplyButton, gbc);
    final JPanel spacer2 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 2;
    gbc.fill = GridBagConstraints.VERTICAL;
    MainPanel.add(spacer2, gbc);
    firstMatrixLabel.setLabelFor(matrixAX);
    firstMatrixYsizeLabel.setLabelFor(matrixAX);
  }

  /**
   * @noinspection ALL
   */
  private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
    if (currentFont == null) return null;
    String resultName;
    if (fontName == null) {
      resultName = currentFont.getName();
    } else {
      Font testFont = new Font(fontName, Font.PLAIN, 10);
      if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
        resultName = fontName;
      } else {
        resultName = currentFont.getName();
      }
    }
    return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return MainPanel;
  }
}
